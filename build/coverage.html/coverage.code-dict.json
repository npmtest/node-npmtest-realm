{"/home/travis/build/npmtest/node-npmtest-realm/test.js":"/* istanbul instrument in package npmtest_realm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-realm/lib.npmtest_realm.js":"/* istanbul instrument in package npmtest_realm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_realm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_realm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-realm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-realm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_realm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_realm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_realm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_realm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_realm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_realm.__dirname + '/lib.npmtest_realm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/index.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\n// Prevent React Native packager from seeing modules required with this\nfunction nodeRequire(module) {\n    return require(module);\n}\n\n\nfunction getContext() {\n    // If process is an object, we're probably running in Node or Electron\n    // From: http://stackoverflow.com/a/24279593/1417293\n    if (typeof process === 'object' && process + '' === '[object process]') {\n        return process.type === 'renderer' ? 'electron' : 'nodejs';\n    }\n\n    // When running via Jest, the jest object is defined.\n    if (typeof jest === 'object') {\n        return 'nodejs';\n    }\n\n    // If we've already injected the Realm class, we are probably\n    // running in a jscore environment, either directly or via React Native\n    if (typeof Realm !== 'undefined') {\n        if (typeof navigator !== 'undefined' && \n            navigator.product === 'ReactNative') { // eslint-disable-line no-undef\n            return 'reactnative';\n        }\n\n        return 'jscore';\n    }\n\n    // Visual Studio Code defines the global.__debug__ object.\n    if (typeof global !== 'undefined' && global.__debug__) {\n        return 'vscodedebugger';\n    }\n\n    // Finally, if the navigator.userAgent contains the string \"Chrome\", we're likely\n    // running via the chrome debugger.\n    if (typeof navigator !== 'undefined' && \n        /Chrome/.test(navigator.userAgent)) { // eslint-disable-line no-undef\n        return 'chromedebugger';\n    }\n\n    throw Error(\"Unknown execution context\");\n}\n\nvar realmConstructor;\n\nswitch(getContext()) {\n    case 'nodejs':\n    case 'electron':\n        nodeRequire('./submit-analytics')('Run'); \n\n        var binary = nodeRequire('node-pre-gyp');\n        var path = nodeRequire('path');\n        var pkg = path.resolve(path.join(__dirname,'../package.json'));\n        var binding_path = binary.find(pkg);\n\n        realmConstructor = require(binding_path).Realm;\n        break;\n    \n    case 'reactnative':\n    case 'jscore':\n        realmConstructor = Realm;  // eslint-disable-line no-undef\n        break;\n\n    case 'chromedebugger':\n    case 'vscodedebugger':\n        realmConstructor = require('./browser').default; // (exported as ES6 module)\n        break;\n}\n\nif (!realmConstructor) {\n    throw new Error('Missing Realm constructor. Did you run \"react-native link realm\"? Please see https://realm.io/docs/react-native/latest/#missing-realm-constructor for troubleshooting');\n}\n\nrequire('./extensions')(realmConstructor);\n\nmodule.exports = realmConstructor;\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/submit-analytics.js":"#!/usr/bin/env node\n\n// Asynchronously submits install information to Realm.\n//\n// Why are we doing this? In short, because it helps us build a better product\n// for you. None of the data personally identifies you, your employer or your\n// app, but it *will* help us understand what language you use, what Node.js\n// versions you target, etc. Having this info will help prioritizing our time,\n// adding new features and deprecating old features. Collecting an anonymized\n// application path & anonymized machine identifier is the only way for us to\n// count actual usage of the other metrics accurately. If we don’t have a way to\n// deduplicate the info reported, it will be useless, as a single developer\n// `npm install`-ing the same app 10 times would report 10 times more than another \n// developer that only installs once, making the data all but useless.\n// No one likes sharing data unless it’s necessary, we get it, and we’ve\n// debated adding this for a long long time. If you truly, absolutely\n// feel compelled to not send this data back to Realm, then you can set an env\n// variable named REALM_DISABLE_ANALYTICS.\n//\n// Currently the following information is reported:\n// - What version of Realm is being installed.\n// - The OS platform and version which is being used.\n// - Node.js, v8, libuv, OpenSSL version numbers. \n// - An anonymous machine identifier and hashed application path to aggregate the other information on.\n\n'use strict';\n\nconst os = require('os');\nconst crypto = require('crypto');\nconst fs = require('fs');\nconst request = require('request');\n\nfunction sha256(data) {\n    let hash = crypto.createHash('sha256');\n    hash.update(data);\n    return hash.digest('hex');\n}\n\nfunction getDarwinIdentifier() {\n    const interfaces = os.networkInterfaces();\n    const iface = interfaces[\"en0\"] || interfaces[\"en1\"];\n    if (!iface) {\n        return Buffer.from('unknown', 'utf8');\n    }\n\n    const mac = iface[0].mac.replace(/:/g, '');\n    return new Buffer(mac, 'hex');\n}\n\nfunction getLinuxIdentifier() {\n    if (fs.existsSync('/var/lib/dbus/machine-id')) {\n        return fs.readFileSync('/var/lib/dbus/machine-id');\n    } else if (fs.existsSync('/etc/machine-id')) {\n        return fs.readFileSync('/etc/machine-id');\n    } else {\n        return Buffer.from('unknown', 'utf8');\n    }\n}\n\nfunction getAnonymizedMachineIdentifier() {\n    switch (os.platform()) {\n        case 'darwin':\n            return sha256(getDarwinIdentifier());\n        case 'linux':\n            return sha256(getLinuxIdentifier());\n        default:\n            return null;\n    }\n}\n\nmodule.exports = function(eventName) {\n    if ('REALM_DISABLE_ANALYTICS' in process.env)\n        return;\n\n    const identifier = getAnonymizedMachineIdentifier();\n    const payload = {\n        'event': eventName,\n        'properties': {\n            'token': 'aab85907a13e1ff44a95be539d9942a9',\n            'distinct_id': identifier,\n            'Anonymized Machine Identifier': identifier,\n            'Anonymized Application ID': sha256(__dirname),\n            'Binding': 'node.js',\n            'Version': require('../package.json').version,\n            'Language': 'javascript',\n            'OS Type': os.platform(),\n            'OS Version': os.release(),\n            'Node.js versions': process.versions\n        }\n    };\n\n    request(`https://api.mixpanel.com/track/?data=${new Buffer(JSON.stringify(payload), 'utf8').toString('base64')}&ip=1`, \n        () => { /* Analytics failed. Do nothing. */ });\n}\n\nif (require.main === module) {\n    module.exports('Install');\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/extensions.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nlet getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function(obj) {\n    return Object.getOwnPropertyNames(obj).reduce(function (descriptors, name) {\n        descriptors[name] = Object.getOwnPropertyDescriptor(obj, name);\n        return descriptors;\n    }, {});\n};\n\nfunction setConstructorOnPrototype(klass) {\n    if (klass.prototype.constructor !== klass) {\n        Object.defineProperty(klass.prototype, 'constructor', { value: klass, configurable: true, writable: true });\n    }\n}\n\nmodule.exports = function(realmConstructor) {\n    // Add the specified Array methods to the Collection prototype.\n    Object.defineProperties(realmConstructor.Collection.prototype, require('./collection-methods'));\n\n    setConstructorOnPrototype(realmConstructor.Collection);\n    setConstructorOnPrototype(realmConstructor.List);\n    setConstructorOnPrototype(realmConstructor.Results);\n    setConstructorOnPrototype(realmConstructor.Object);\n\n    // Add sync methods\n    if (realmConstructor.Sync) {\n        let userMethods = require('./user-methods');\n        Object.defineProperties(realmConstructor.Sync.User, getOwnPropertyDescriptors(userMethods.static));\n        Object.defineProperties(realmConstructor.Sync.User.prototype, getOwnPropertyDescriptors(userMethods.instance));\n        Object.defineProperty(realmConstructor.Sync.User, '_realmConstructor', { value: realmConstructor });\n\n        realmConstructor.Sync.AuthError = require('./errors').AuthError;\n\n        if (realmConstructor.Sync.cleanup) {\n            // FIXME: DOES THIS WORK ON BOTH NODE AND REACT NATIVE?\n            process.on('exit', realmConstructor.Sync.cleanup);\n            process.on('SIGINT', function () {\n                realmConstructor.Sync.cleanup();\n                process.exit(2);\n            });\n            process.on('uncaughtException', function(e) {\n                realmConstructor.Sync.cleanup();\n                /* eslint-disable no-console */\n                console.log(e.stack);\n                process.exit(99);\n            });\n        }\n\n        setConstructorOnPrototype(realmConstructor.Sync.User);\n        setConstructorOnPrototype(realmConstructor.Sync.Session);\n    } else {\n        Object.defineProperty(realmConstructor, 'Sync', {\n            get: function () {\n                throw new Error(\"Realm.Sync is not available. Note that the developer edition of the Node.JS SDK for Realm does not include sync on Linux.\");\n            }\n        })\n    }\n\n    // TODO: Remove this now useless object.\n    var types = Object.freeze({\n        'BOOL': 'bool',\n        'INT': 'int',\n        'FLOAT': 'float',\n        'DOUBLE': 'double',\n        'STRING': 'string',\n        'DATE': 'date',\n        'DATA': 'data',\n        'OBJECT': 'object',\n        'LIST': 'list',\n    });\n    Object.defineProperty(realmConstructor, 'Types', {\n        get: function() {\n            if (typeof console != 'undefined') {\n                /* global console */\n                /* eslint-disable no-console */\n                var stack = new Error().stack.split(\"\\n\").slice(2).join(\"\\n\");\n                var msg = '`Realm.Types` is deprecated! Please specify the type name as lowercase string instead!\\n'+stack;\n                if (console.warn != undefined) {\n                    console.warn(msg);\n                }\n                else {\n                    console.log(msg);\n                }\n                /* eslint-enable no-console */\n            }\n            return types;\n        },\n        configurable: true\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/collection-methods.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nvar arrayPrototype = Array.prototype;\n\n// eslint-disable-next-line no-undef\nvar iteratorPrototype = {};\n\n// These iterators should themselves be iterable.\nObject.defineProperty(iteratorPrototype, Symbol.iterator, {\n    value: function() {\n        return this;\n    }\n});\n\n[\n    'join',\n    'slice',\n    'forEach',\n    'every',\n    'some',\n    'find',\n    'findIndex',\n    'map',\n    'reduce',\n    'reduceRight',\n].forEach(function(methodName) {\n    var method = arrayPrototype[methodName];\n    if (method) {\n        exports[methodName] = {value: method, configurable: true, writable: true};\n    }\n});\n\n['entries', 'keys', 'values'].forEach(function(methodName) {\n    var method = function() {\n        var self = this;\n        var index = 0;\n\n        return Object.create(iteratorPrototype, {\n            next: {\n                value: function() {\n                    if (!self || index >= self.length) {\n                        self = null;\n                        return {done: true, value: undefined};\n                    }\n\n                    var value;\n                    switch (methodName) {\n                        case 'entries':\n                            value = [index, self[index]];\n                            break;\n                        case 'keys':\n                            value = index;\n                            break;\n                        default:\n                            value = self[index];\n                    }\n\n                    index++;\n                    return {done: false, value: value};\n                }\n            }\n        });\n    };\n\n    exports[methodName] = {value: method, configurable: true, writable: true};\n});\n\nexports[Symbol.iterator] = exports.values;\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/errors.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nfunction AuthError(problem) {\n    Error.call(this, problem.title);\n    Object.assign(this, problem);\n}\n\nAuthError.__proto__ = Error;\nAuthError.prototype.__proto__ = Error.prototype;\n\nexports['AuthError'] = AuthError;\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/management-schema.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nmodule.exports = [\n    {\n        name: 'PermissionChange',\n        properties: {\n            id:            { type: 'string' },\n            createdAt:     { type: 'date' },\n            updatedAt:     { type: 'date' },\n            statusCode:    { type: 'int', optional: true },\n            statusMessage: { type: 'string', optional: true },\n            userId:        { type: 'string' },\n            realmUrl:      { type: 'string' },\n            mayRead:       { type: 'bool', optional: true },\n            mayWrite:      { type: 'bool', optional: true },\n            mayManage:     { type: 'bool', optional: true },\n        },\n        primaryKey: 'id'\n    },\n    {\n        name: 'PermissionOffer',\n        properties: {\n            id:            { type: 'string' },\n            createdAt:     { type: 'date' },\n            updatedAt:     { type: 'date' },\n            statusCode:    { type: 'int', optional: true },\n            statusMessage: { type: 'string', optional: true },\n            token:         { type: 'string', optional: true, indexed: true },\n            realmUrl:      { type: 'string' },\n            mayRead:       { type: 'bool', default: false },\n            mayWrite:      { type: 'bool', default: false },\n            mayManage:     { type: 'bool', default: false },\n            expiresAt:     { type: 'date', optional: true },\n        },\n        primaryKey: 'id'\n    },\n    {\n        name: 'PermissionOfferResponse',\n        properties: {\n            id:            { type: 'string' },\n            createdAt:     { type: 'date' },\n            updatedAt:     { type: 'date' },\n            statusCode:    { type: 'int', optional: true },\n            statusMessage: { type: 'string', optional: true },\n            token:         { type: 'string' },\n            realmUrl:      { type: 'string', optional: true },\n        },\n        primaryKey: 'id'\n    }\n];\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/user-methods.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nconst AuthError = require('./errors').AuthError;\n\nfunction node_require(module) {\n    return require(module);\n}\n\nfunction checkTypes(args, types) {\n    args = Array.prototype.slice.call(args);\n    for (var i = 0; i < types.length; ++i) {\n        if (typeof args[i]  !== types[i]) {\n            throw new TypeError('param ' + i + ' must be of type ' + types[i]);\n        }\n    }\n}\n\nconst performFetch = typeof fetch === 'undefined' ? node_require('node-fetch') : fetch;\n\nconst url_parse = require('url-parse');\n\nconst postHeaders =  {\n    'content-type': 'application/json;charset=utf-8',\n    'accept': 'application/json'\n};\n\nfunction auth_url(server) {\n    if (server.charAt(server.length-1) != '/') {\n        return server + '/auth';\n    }\n    return server + 'auth';\n}\n\nfunction scheduleAccessTokenRefresh(user, localRealmPath, realmUrl, expirationDate) {\n    const refreshBuffer = 10 * 1000;\n    const timeout = expirationDate - Date.now() - refreshBuffer;\n    setTimeout(() => refreshAccessToken(user, localRealmPath, realmUrl), timeout);\n}\n\nfunction refreshAccessToken(user, localRealmPath, realmUrl) {\n    let parsedRealmUrl = url_parse(realmUrl);\n    const url = auth_url(user.server);\n    const options = {\n        method: 'POST',\n        body: JSON.stringify({\n            data: user.token,\n            path: parsedRealmUrl.pathname,\n            provider: 'realm',\n            app_id: ''\n        }),\n        headers: postHeaders\n    };\n    performFetch(url, options)\n        // in case something lower in the HTTP stack breaks, try again in 10 seconds\n        .catch(() => setTimeout(() => refreshAccessToken(user, localRealmPath, realmUrl), 10 * 1000))\n        .then((response) => response.json().then((json) => { return { response, json }; }))\n        .then((responseAndJson) => {\n            const response = responseAndJson.response;\n            const json = responseAndJson.json;\n            // Look up a fresh instance of the user.\n            // We do this because in React Native Remote Debugging\n            // `Realm.clearTestState()` will have invalidated the user object\n            let newUser = user.constructor.all[user.identity];\n            if (newUser) {\n                let session = newUser._sessionForOnDiskPath(localRealmPath);\n                if (session) {\n                    const errorHandler = session.config.error;\n                    if (response.status != 200) {\n                        let error = new AuthError(json);\n                        if (errorHandler) {\n                            errorHandler(session, error);\n                        } else {\n                            (console.error || console.log).call(console, `Unhandled session token refresh error: ${error}`);\n                        }\n                    } else if (session.state !== 'invalid') {\n                        parsedRealmUrl.set('pathname', json.access_token.token_data.path);\n                        session._refreshAccessToken(json.access_token.token, parsedRealmUrl.href);\n\n                        if (errorHandler && errorHandler._notifyOnAccessTokenRefreshed) {\n                            errorHandler(session, errorHandler._notifyOnAccessTokenRefreshed)\n                        }\n\n                        const tokenExpirationDate = new Date(json.access_token.token_data.expires * 1000);\n                        scheduleAccessTokenRefresh(newUser, localRealmPath, realmUrl, tokenExpirationDate);\n                    }\n                }\n            }\n        });\n}\n\nfunction _authenticate(userConstructor, server, json, callback) {\n    json.app_id = '';\n    const url = auth_url(server);\n    const options = {\n        method: 'POST',\n        body: JSON.stringify(json),\n        headers: postHeaders,\n        open_timeout: 5000\n    };\n    performFetch(url, options)\n        .then((response) => { \n            if (response.status !== 200) {\n                return response.json().then((body) => callback(new AuthError(body)));\n            } else {\n                return response.json().then(function (body) {\n                    // TODO: validate JSON\n                    const token = body.refresh_token.token;\n                    const identity = body.refresh_token.token_data.identity;\n                    callback(undefined, userConstructor.createUser(server, identity, token, false));\n                }) \n            }\n        })\n        .catch(callback);\n}\n\nmodule.exports = {\n    static: {\n        get current() {\n            const allUsers = this.all;\n            const keys = Object.keys(allUsers);\n            if (keys.length === 0) {\n                return undefined;\n            } else if (keys.length > 1) {\n                throw new Error(\"Multiple users are logged in\");\n            }\n\n            return allUsers[keys[0]];\n        },\n\n        adminUser(token) {\n            checkTypes(arguments, ['string']);\n            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n                return v.toString(16);\n            });\n            var user = this.createUser('', uuid, token, true);\n            return user;\n        },\n\n        register(server, username, password, callback) {\n            checkTypes(arguments, ['string', 'string', 'string', 'function']);\n            _authenticate(this, server, { \n                provider: 'password', \n                user_info: { password: password, register: true }, \n                data: username\n            }, callback);\n        },\n\n        login(server, username, password, callback) {\n            checkTypes(arguments, ['string', 'string', 'string', 'function']);\n            _authenticate(this, server, { \n                provider: 'password', \n                user_info: { password: password }, \n                data: username\n            }, callback);\n        },\n\n        registerWithProvider(server, options, callback) {\n\n            // Compatibility with previous signature: \n            // registerWithProvider(server, provider, providerToken, callback)\n            if (arguments.length === 4) {\n                checkTypes(arguments, ['string', 'string', 'string', 'function']);\n                options = {\n                    provider: arguments[1],\n                    providerToken: arguments[2]\n                };\n                callback = arguments[3];    \n            } else {\n                checkTypes(arguments, ['string', 'object', 'function']);\n            }\n\n            let reqOptions = {\n                provider: options.provider,\n                data: options.providerToken,\n            };\n\n            if (options.userInfo) {\n                reqOptions.user_info = options.userInfo;\n            }\n\n            _authenticate(this, server, reqOptions, callback);\n        },\n\n        _refreshAccessToken: refreshAccessToken\n    },\n    instance: {\n        openManagementRealm() {\n            let url = url_parse(this.server);\n            if (url.protocol === 'http:') {\n                url.set('protocol', 'realm:');\n            } else if (url.protocol === 'https:') {\n                url.set('protocol', 'realms:');\n            } else {\n                throw new Error(`Unexpected user auth url: ${this.server}`);\n            }\n\n            url.set('pathname', '/~/__management');\n\n            return new this.constructor._realmConstructor({\n                schema: require('./management-schema'),\n                sync: {\n                    user: this,\n                    url: url.href\n                }\n            });\n        }\n    }\n};","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/react-native/index.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport ListView from './listview';\n\nexport { ListView };\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/react-native/listview.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport React from 'react';\nimport { ListView as BaseListView } from 'react-native';\n\nfunction hashObjects(array) {\n    let hash = Object.create(null);\n    for (let i = 0, len = array.length; i < len; i++) {\n        hash[array[i]] = true;\n    }\n    return hash;\n}\n\nclass ListViewDataSource extends BaseListView.DataSource {\n    cloneWithRowsAndSections(inputData, sectionIds, rowIds) {\n        let data = {};\n\n        for (let sectionId in inputData) {\n            let items = inputData[sectionId];\n            let copy;\n\n            // Realm Results and List objects have a snapshot() method.\n            if (typeof items.snapshot == 'function') {\n                copy = items.snapshot();\n            } else if (Array.isArray(items)) {\n                copy = items.slice();\n            } else {\n                copy = Object.assign({}, items);\n            }\n\n            data[sectionId] = copy;\n        }\n\n        if (!sectionIds) {\n            sectionIds = Object.keys(data);\n        }\n        if (!rowIds) {\n            rowIds = sectionIds.map((sectionId) => {\n                let items = data[sectionId];\n                if (typeof items.snapshot != 'function') {\n                    return Object.keys(items);\n                }\n\n                // Efficiently get the keys of the Realm collection, since they're never sparse.\n                let count = items.length;\n                let indexes = new Array(count);\n                for (let i = 0; i < count; i++) {\n                    indexes[i] = i;\n                }\n                return indexes;\n            });\n        }\n\n        // Copy this object with the same parameters initially passed into the constructor.\n        let newSource = new this.constructor({\n            getRowData: this._getRowData,\n            getSectionHeaderData: this._getSectionHeaderData,\n            rowHasChanged: this._rowHasChanged,\n            sectionHeaderHasChanged: this._sectionHeaderHasChanged,\n        });\n\n        newSource._cachedRowCount = rowIds.reduce((n, a) => n + a.length, 0);\n        newSource._dataBlob = data;\n        newSource.sectionIdentities = sectionIds;\n        newSource.rowIdentities = rowIds;\n\n        let prevSectionIds = this.sectionIdentities;\n        let prevRowIds = this.rowIdentities;\n        let prevRowHash = {};\n        for (let i = 0, len = prevRowIds.length; i < len; i++) {\n            prevRowHash[prevSectionIds[i]] = hashObjects(prevRowIds[i]);\n        }\n\n        // These properties allow lazily calculating if rows and section headers should update.\n        newSource._prevDataBlob = this._dataBlob;\n        newSource._prevSectionHash = hashObjects(prevSectionIds);\n        newSource._prevRowHash = prevRowHash;\n\n        return newSource;\n    }\n\n    getRowData() {\n        // The React.ListView calls this for *every* item during each render, which is quite\n        // premature since this can be mildly expensive and memory inefficient since it keeps\n        // the result of this alive through a bound renderRow function.\n        return null;\n    }\n\n    getRow(sectionId, rowId) {\n        // This new method is provided as a convenience for those wishing to be memory efficient.\n        return this._getRowData(this._dataBlob, sectionId, rowId);\n    }\n\n    sectionHeaderShouldUpdate(sectionIndex) {\n        let dirtySections = this._dirtySections;\n        let dirty;\n\n        if ((dirty = dirtySections[sectionIndex]) != null) {\n            // This was already calculated before.\n            return dirty;\n        }\n\n        let sectionId = this.sectionIdentities[sectionIndex];\n        let sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n        if (this._prevSectionHash[sectionId] && sectionHeaderHasChanged) {\n            dirty = sectionHeaderHasChanged(\n                this._getSectionHeaderData(this._prevDataBlob, sectionId),\n                this._getSectionHeaderData(this._dataBlob, sectionId)\n            );\n        }\n\n        // Unless it's explicitly *not* dirty, then this section header should update.\n        return (dirtySections[sectionIndex] = dirty !== false);\n    }\n\n    rowShouldUpdate(sectionIndex, rowIndex) {\n        let dirtyRows = this._dirtyRows[sectionIndex];\n        let dirty;\n\n        if (!dirtyRows) {\n            dirtyRows = this._dirtyRows[sectionIndex] = [];\n        } else if ((dirty = dirtyRows[rowIndex]) != null) {\n            // This was already calculated before.\n            return dirty;\n        }\n\n        let sectionId = this.sectionIdentities[sectionIndex];\n        if (this._prevSectionHash[sectionId]) {\n            let rowId = this.rowIdentities[sectionIndex][rowIndex];\n            if (this._prevRowHash[sectionId][rowId]) {\n                let prevItem = this._getRowData(this._prevDataBlob, sectionId, rowId);\n                if (prevItem) {\n                    let item = this._getRowData(this._dataBlob, sectionId, rowId);\n                    if (item) {\n                        dirty = this._rowHasChanged(prevItem, item);\n                    }\n                }\n            }\n        }\n\n        // Unless it's explicitly *not* dirty, then this row should update.\n        return (dirtyRows[rowIndex] = dirty !== false);\n    }\n}\n\nexport default class ListView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.renderRow = this.renderRow.bind(this);\n    }\n\n    render() {\n        return (\n            <BaseListView {...this.props} ref=\"listView\" renderRow={this.renderRow} />\n        );\n    }\n\n    renderRow(_, sectionId, rowId, ...args) {\n        let props = this.props;\n        let item = props.dataSource.getRow(sectionId, rowId);\n\n        // The item could be null because our data is a snapshot and it was deleted.\n        return item ? props.renderRow(item, sectionId, rowId, ...args) : null;\n    }\n\n    getInnerViewNode() {\n        return this.refs.listView.getInnerViewNode();\n    }\n\n    scrollTo(...args) {\n        this.refs.listView.scrollTo(...args);\n    }\n\n    setNativeProps(props) {\n        this.refs.listView.setNativeProps(props);\n    }\n}\n\nListView.propTypes = {\n    dataSource: React.PropTypes.instanceOf(ListViewDataSource).isRequired,\n    renderRow: React.PropTypes.func.isRequired,\n};\n\nListView.DataSource = ListViewDataSource;\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/scripts/download-realm.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst fetch = require('node-fetch');\nconst ini = require('ini').parse;\nconst unzip = require('extract-zip');\n\nfunction download(url, destination) {\n    return fetch(url).then((response) => {\n        if (response.status !== 200) {\n            throw new Error(`Error downloading ${url} - received status ${response.status} ${response.statusText}`);\n        } else if (response.headers.get('content-type') !== 'application/zip') {\n            throw new Error(`Unexpected response content type - ${response.headers.get('content-type')}`);\n        } else {\n            return new Promise((resolve) => {\n                const file = fs.createWriteStream(destination);\n                response.body.pipe(file)\n                             .on('finish', () => {\n                                 file.close(resolve);\n                             });  \n            });\n        }\n    });\n}\n\nfunction extract(archive, destination) {\n    return new Promise((resolve, reject) => {\n        unzip(archive, { dir: destination }, (error) => {\n            if (error) {\n                reject(error);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\n\nconst dependencies = ini(fs.readFileSync(path.resolve(__dirname, '../dependencies.list'), 'utf8'));\nconst coreArchive = `realm-core-windows-${dependencies.REALM_CORE_VERSION}.zip`;\nconst coreUrl = `https://static.realm.io/downloads/core/${coreArchive}`;\nconst vendorDir = path.resolve(__dirname, '../vendor');\nconst downloadedCoreArchive = path.resolve(vendorDir, coreArchive);\nconst realmDir = path.resolve(vendorDir, 'realm-node');\n\nif (!fs.existsSync(realmDir)) {\n    const downloadTask = fs.existsSync(downloadedCoreArchive) ? Promise.resolve() : download(coreUrl, downloadedCoreArchive);\n    downloadTask.then(() => extract(downloadedCoreArchive, realmDir));\n}","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/scripts/handle-license-check.js":"#!/usr/bin/env node\r\n\r\nprocess.stdin.resume();\r\nprocess.stdin.setEncoding('utf8');\r\n\r\nvar licenseCheckerResult;\r\n\r\nprocess.stdin.on('data', function(data) {\r\n    licenseCheckerResult += data;\r\n});\r\n\r\nprocess.stdin.on('end', function() {\r\n    if (!licenseCheckerResult) {\r\n        console.log(\"All licenses are accepted\");\r\n    } else {\r\n        console.error(\"Unknown license detected in dependency:\");\r\n        console.error(licenseCheckerResult);\r\n    }\r\n});","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/scripts/prepublish.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').execFileSync;\n\nconst dependencies = ini(fs.readFileSync(path.resolve(__dirname, '../dependencies.list'), 'utf8'));\nconsole.log(`Core version: ${dependencies.REALM_CORE_VERSION}`);\nconsole.log(`Sync version: ${dependencies.REALM_SYNC_VERSION}`);\n\nif ('REALM_BUILD_ANDROID' in process.env) {\n    const gradlew = process.platform === 'win32' ? 'gradlew.bat' : 'gradlew';\n    const androidPath = path.resolve(__dirname, '../react-native/android');\n\n    exec(`${androidPath}/${gradlew}`, ['publishAndroid', '-PbuildWithSync=true'], { cwd: androidPath, stdio: 'inherit' });\n}\n\nfunction ini(string) {\n    const result = Object.create(null);\n    for (const line of string.split(/\\r?\\n/)) {\n        const parts = line.split('=');\n        result[parts[0]] = parts[1];\n    }\n\n    return result;\n}","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/base64.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst CHAR_MAP = {};\n\nArray.from(CHARS, (char, i) => CHAR_MAP[char] = i);\n\nexport function decode(base64) {\n    let length = base64.length;\n    let byteCount = length * 0.75;\n\n    if (base64[length - 1] === '=') {\n        byteCount--;\n        if (base64[length - 2] === '=') {\n            byteCount--;\n        }\n    }\n\n    let buffer = new ArrayBuffer(byteCount);\n    let bytes = new Uint8Array(buffer);\n\n    for (let i = 0, j = 0; i < length; i += 4) {\n        let index1 = CHAR_MAP[base64[i]];\n        let index2 = CHAR_MAP[base64[i + 1]];\n        let index3 = CHAR_MAP[base64[i + 2]];\n        let index4 = CHAR_MAP[base64[i + 3]];\n\n        bytes[j++] = (index1 << 2) + ((index2 & 0x30) >> 4);\n        bytes[j++] = ((index2 & 0x0f) << 4) + ((index3 & 0x3c) >> 2);\n        bytes[j++] = ((index3 & 0x03) << 6) + index4;\n    }\n\n    return buffer;\n}\n\nexport function encode(data) {\n    var byteOffset = 0;\n    var buffer;\n\n    if (data instanceof ArrayBuffer) {\n        buffer = data;\n    } else if (ArrayBuffer.isView(data)) {\n        buffer = data.buffer;\n        byteOffset = data.byteOffset;\n    } else {\n        throw new TypeError('Can only base64 encode ArrayBuffer and ArrayBufferView objects');\n    }\n\n    let byteCount = data.byteLength;\n    let bytes = new Uint8Array(buffer, byteOffset, byteCount);\n    let base64 = '';\n\n    for (let i = 0; i < byteCount; i += 3) {\n        base64 += CHARS[(bytes[i] & 0xfc) >> 2];\n        base64 += CHARS[((bytes[i] & 0x03) << 4) + ((bytes[i + 1] & 0xf0) >> 4)];\n        base64 += CHARS[((bytes[i + 1] & 0x0f) << 2) + ((bytes[i + 2] & 0xc0) >> 6)];\n        base64 += CHARS[bytes[i + 2] & 0x3f];\n    }\n\n    switch (byteCount % 3) {\n        case 1:\n            return base64.slice(0, -2) + '==';\n        case 2:\n            return base64.slice(0, -1) + '=';\n        default:\n            return base64;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/collections.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { keys } from './constants';\nimport { getterForProperty } from './util';\nimport { getProperty, setProperty } from './rpc';\n\nlet mutationListeners = {};\n\nexport default class Collection {\n    constructor() {\n        throw new TypeError('Illegal constructor');\n    }\n}\n\nexport function addMutationListener(realmId, callback) {\n    let listeners = mutationListeners[realmId] || (mutationListeners[realmId] = new Set());\n    listeners.add(callback);\n}\n\nexport function removeMutationListener(realmId, callback) {\n    let listeners = mutationListeners[realmId];\n    if (listeners) {\n        listeners.delete(callback);\n    }\n}\n\nexport function clearMutationListeners() {\n    mutationListeners = {};\n}\n\nexport function fireMutationListeners(realmId) {\n    let listeners = mutationListeners[realmId];\n    if (listeners) {\n        listeners.forEach((cb) => cb());\n    }\n}\n\nfunction isIndex(propertyName) {\n    return typeof propertyName === 'number' || (typeof propertyName === 'string' && /^\\d+$/.test(propertyName));\n}\n\nconst mutable = Symbol('mutable');\n\nconst traps = {\n    get(collection, property, receiver) {\n        if (isIndex(property)) {\n            return getProperty(collection[keys.realm], collection[keys.id], property);\n        }\n\n        return Reflect.get(collection, property, collection);\n    },\n    set(collection, property, value, receiver) {\n        if (isIndex(property)) {\n            if (!collection[mutable]) {\n                return false;\n            }\n\n            setProperty(collection[keys.realm], collection[keys.id], property, value);\n\n            // If this isn't a primitive value, then it might create a new object in the Realm.\n            if (value && typeof value == 'object') {\n                fireMutationListeners(collection[keys.realm]);\n            }\n\n            return true;\n        }\n\n        return Reflect.set(collection, property, value, collection);\n    },\n    ownKeys(collection) {\n        return Reflect.ownKeys(collection).concat(Array.from({ length: collection.length }, (value, key) => String(key)));\n    },\n    getOwnPropertyDescriptor(collection, property) {\n        if (isIndex(property)) {\n            let descriptor = {\n                enumerable: true,\n                configurable: true,\n                writable: collection[mutable]\n            };\n            Reflect.defineProperty(descriptor, \"value\", { get: () => this.get(collection, property) });\n            return descriptor;\n        }\n\n        return Reflect.getOwnPropertyDescriptor(collection, property);\n    },\n    has(collection, property) {\n        if (isIndex(property)) {\n            return true;\n        }\n\n        return Reflect.has(collection, property);\n    }\n};\n\nexport function createCollection(prototype, realmId, info, _mutable) {\n    let collection = Object.create(prototype);\n\n    Object.defineProperties(collection, {\n        'length': {\n            get: getterForProperty('length'),\n        },\n        '-1': {\n            value: undefined,\n        },\n    });\n\n    collection[keys.realm] = realmId;\n    collection[keys.id] = info.id;\n    collection[keys.type] = info.type;\n    collection[mutable] = _mutable;\n\n    return new Proxy(collection, traps);\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/constants.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nexport const keys = {};\nexport const objectTypes = {};\nexport const propTypes = {};\n\n[\n    'id',\n    'realm',\n    'type',\n].forEach(function(name) {\n    keys[name] = Symbol(name);\n});\n\n[\n    'DATA',\n    'DATE',\n    'DICT',\n    'FUNCTION',\n    'LIST',\n    'OBJECT',\n    'REALM',\n    'RESULTS',\n    'USER',\n    'SESSION',\n    'UNDEFINED',\n].forEach(function(type) {\n    Object.defineProperty(objectTypes, type, {\n        value: type.toLowerCase(),\n    });\n});\n\n[\n    'BOOL',\n    'INT',\n    'FLOAT',\n    'DOUBLE',\n    'STRING',\n    'DATE',\n    'DATA',\n    'OBJECT',\n    'LIST',\n].forEach(function(type) {\n    Object.defineProperty(propTypes, type, {\n        value: type.toLowerCase(),\n        enumerable: true,\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/index.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { NativeModules } from 'react-native';\nimport { keys, objectTypes } from './constants';\nimport Collection, * as collections from './collections';\nimport List, { createList } from './lists';\nimport Results, { createResults } from './results';\nimport RealmObject, * as objects from './objects';\nimport User, { createUser } from './user';\nimport Session, { createSession } from './session';\nimport * as rpc from './rpc';\nimport * as util from './util';\nimport { static as staticUserMethods } from '../user-methods';\n\nconst {debugHosts, debugPort} = NativeModules.Realm;\n\nrpc.registerTypeConverter(objectTypes.LIST, createList);\nrpc.registerTypeConverter(objectTypes.RESULTS, createResults);\nrpc.registerTypeConverter(objectTypes.OBJECT, objects.createObject);\nrpc.registerTypeConverter(objectTypes.REALM, createRealm);\nrpc.registerTypeConverter(objectTypes.USER, createUser);\nrpc.registerTypeConverter(objectTypes.SESSION, createSession);\n\nfunction createRealm(_, info) {\n    let realm = Object.create(Realm.prototype);\n\n    setupRealm(realm, info.id);\n    return realm;\n}\n\nfunction setupRealm(realm, realmId) {\n    realm[keys.id] = realmId;\n    realm[keys.realm] = realmId;\n    realm[keys.type] = objectTypes.REALM;\n\n    [\n        'path',\n        'readOnly',\n        'schema',\n        'schemaVersion',\n        'syncSession',\n    ].forEach((name) => {\n        Object.defineProperty(realm, name, {get: util.getterForProperty(name)});\n    });\n}\n\nfunction getObjectType(realm, type) {\n    if (typeof type == 'function') {\n        return objects.typeForConstructor(realm[keys.realm], type);\n    }\n    return type;\n}\n\nexport default class Realm {\n    constructor(config) {\n        let schemas = typeof config == 'object' && config.schema;\n        let constructors = schemas ? {} : null;\n\n        for (let i = 0, len = schemas ? schemas.length : 0; i < len; i++) {\n            let item = schemas[i];\n\n            if (typeof item == 'function') {\n                let schema = item.schema;\n                if (!schema || typeof schema != 'object') {\n                    throw new Error(\"Realm object constructor must have 'schema' property\");\n                }\n\n                let {name, properties} = schema;\n                if (!name || typeof name != 'string') {\n                    throw new Error(\"Realm object schema must have 'name' property\");\n                } else if (!properties || typeof properties != 'object') {\n                    throw new Error(\"Realm object schema must have 'properties' property\"); \n                }\n\n                schemas.splice(i, 1, schema);\n                constructors[name] = item;\n            }\n        }\n\n        let realmId = rpc.createRealm(Array.from(arguments));\n        setupRealm(this, realmId);\n\n        // This will create mappings between the id, path, and potential constructors.\n        objects.registerConstructors(realmId, this.path, constructors);\n    }\n\n    create(type, ...args) {\n        let method = util.createMethod(objectTypes.REALM, 'create', true);\n        return method.apply(this, [getObjectType(this, type), ...args]);\n    }\n\n    objects(type, ...args) {\n        let method = util.createMethod(objectTypes.REALM, 'objects');\n        return method.apply(this, [getObjectType(this, type), ...args]);\n    }\n\n    objectForPrimaryKey(type, ...args) {\n        let method = util.createMethod(objectTypes.REALM, 'objectForPrimaryKey');\n        return method.apply(this, [getObjectType(this, type), ...args]);\n    }\n}\n\n// Non-mutating methods:\nutil.createMethods(Realm.prototype, objectTypes.REALM, [\n    'addListener',\n    'removeListener',\n    'removeAllListeners',\n    'close',\n]);\n\n// Mutating methods:\nutil.createMethods(Realm.prototype, objectTypes.REALM, [\n    'delete',\n    'deleteAll',\n    'write',\n], true);\n\nconst Sync = {\n    User,\n    Session\n};\n\nObject.defineProperties(Realm, {\n    Collection: {\n        value: Collection,\n    },\n    List: {\n        value: List,\n    },\n    Results: {\n        value: Results,\n    },\n    Object: {\n        value: RealmObject,\n    },\n    Sync: {\n        value: Sync,\n    },\n    defaultPath: {\n        get: util.getterForProperty('defaultPath'),\n        set: util.setterForProperty('defaultPath'),\n    },\n    schemaVersion: {\n        value: function(_path, _encryptionKey) {\n            return rpc.callMethod(undefined, Realm[keys.id], 'schemaVersion', Array.from(arguments));\n        }\n    },\n    copyBundledRealmFiles: {\n        value: function() {\n            return rpc.callMethod(undefined, Realm[keys.id], 'copyBundledRealmFiles', []);\n        }\n    },\n    clearTestState: {\n        value: function() {\n            collections.clearMutationListeners();\n            objects.clearRegisteredConstructors();\n            rpc.clearTestState();\n        },\n    },\n});\n\nfor (let i = 0, len = debugHosts.length; i < len; i++) {\n    try {\n        let refreshAccessTokenCallback = staticUserMethods._refreshAccessToken.bind(User);\n        // The session ID refers to the Realm constructor object in the RPC server.\n        Realm[keys.id] = rpc.createSession(refreshAccessTokenCallback, debugHosts[i] + ':' + debugPort);\n        break;\n    } catch (e) {\n        // Only throw exception after all hosts have been tried.\n        if (i < len - 1) {\n            continue;\n        }\n\n        // Log the original exception for debugging purposes.\n        console.error(e);\n\n        throw new Error(\n            'Realm failed to connect to the embedded debug server inside the app. ' +\n            'If attempting to use Chrome debugging from a device, ensure the device is ' +\n            'reachable on the same network as this machine.'\n        );\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/lists.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport Collection, { createCollection } from './collections';\nimport { objectTypes } from './constants';\nimport { createMethods } from './util';\n\nexport default class List extends Collection {\n}\n\n// Non-mutating methods:\ncreateMethods(List.prototype, objectTypes.LIST, [\n    'filtered',\n    'sorted',\n    'snapshot',\n    'isValid',    \n    'addListener',\n    'removeListener',\n    'removeAllListeners',\n]);\n\n// Mutating methods:\ncreateMethods(List.prototype, objectTypes.LIST, [\n    'pop',\n    'shift',\n    'push',\n    'unshift',\n    'splice',\n], true);\n\nexport function createList(realmId, info) {\n    return createCollection(List.prototype, realmId, info, true);\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/objects.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { keys, objectTypes } from './constants';\nimport { getterForProperty, setterForProperty, createMethods } from './util';\n\nlet registeredConstructors = {};\nlet registeredRealmPaths = {};\n\nexport default class RealmObject {\n}\n\n// Non-mutating methods:\ncreateMethods(RealmObject.prototype, objectTypes.OBJECT, [\n    'isValid',\n]);\n\nexport function clearRegisteredConstructors() {\n    registeredConstructors = {};\n    registeredRealmPaths = {};\n}\n\nexport function createObject(realmId, info) {\n    let schema = info.schema;\n    let realmPath = registeredRealmPaths[realmId];\n    let constructor = (registeredConstructors[realmPath] || {})[schema.name];\n    let object = Object.create(constructor ? constructor.prototype : RealmObject.prototype);\n\n    object[keys.realm] = realmId;\n    object[keys.id] = info.id;\n    object[keys.type] = info.type;\n\n    schema.properties.forEach((name) => {\n        Object.defineProperty(object, name, {\n            enumerable: true,\n            get: getterForProperty(name),\n            set: setterForProperty(name),\n        });\n    });\n\n    if (constructor) {\n        let result = constructor.call(object);\n        if (result != null && result != object) {\n            throw new Error('Realm object constructor must not return another value');\n        }\n    }\n\n    return object;\n}\n\nexport function registerConstructors(realmId, realmPath, constructors) {\n    registeredRealmPaths[realmId] = realmPath;\n\n    if (constructors) {\n        registeredConstructors[realmPath] = constructors;\n    }\n}\n\nexport function typeForConstructor(realmId, constructor) {\n    let realmPath = registeredRealmPaths[realmId];\n    let constructors = registeredConstructors[realmPath];\n\n    for (let name in constructors) {\n        if (constructors[name] == constructor) {\n            return name;\n        }\n    }\n\n    return null;\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/results.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport Collection, { createCollection } from './collections';\nimport { objectTypes } from './constants';\nimport { createMethods } from './util';\n\nexport default class Results extends Collection {\n}\n\ncreateMethods(Results.prototype, objectTypes.RESULTS, [\n    'filtered',\n    'sorted',\n    'snapshot',\n    'isValid',\n    'addListener',\n    'removeListener',\n    'removeAllListeners',\n]);\n\nexport function createResults(realmId, info) {\n    return createCollection(Results.prototype, realmId, info);\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/rpc.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport * as base64 from './base64';\nimport { keys, objectTypes } from './constants';\n\nconst {id: idKey, realm: _realmKey} = keys;\nlet registeredCallbacks = [];\nconst typeConverters = {};\n\n// Callbacks that are registered initially (currently only refreshAccessToken) will\n// carry this symbol so they are not wiped in clearTestState.\nconst persistentCallback = Symbol(\"persistentCallback\");\n\nlet XMLHttpRequest = global.originalXMLHttpRequest || global.XMLHttpRequest;\nlet sessionHost;\nlet sessionId;\n\n// Check if XMLHttpRequest has been overridden, and get the native one if that's the case.\nif (XMLHttpRequest.__proto__ != global.XMLHttpRequestEventTarget) {\n    let fakeXMLHttpRequest = XMLHttpRequest;\n    delete global.XMLHttpRequest;\n    XMLHttpRequest = global.XMLHttpRequest;\n    global.XMLHttpRequest = fakeXMLHttpRequest;\n}\n\nregisterTypeConverter(objectTypes.DATA, (_, {value}) => base64.decode(value));\nregisterTypeConverter(objectTypes.DATE, (_, {value}) => new Date(value));\nregisterTypeConverter(objectTypes.DICT, deserializeDict);\nregisterTypeConverter(objectTypes.FUNCTION, deserializeFunction);\n\nexport function registerTypeConverter(type, handler) {\n    typeConverters[type] = handler;\n}\n\nexport function createSession(refreshAccessToken, host) {\n    refreshAccessToken[persistentCallback] = true;\n    sessionId = sendRequest('create_session', { refreshAccessToken: serialize(undefined, refreshAccessToken) }, host);\n    sessionHost = host;\n\n    return sessionId;\n}\n\nexport function createRealm(args) {\n    if (args) {\n        args = args.map((arg) => serialize(null, arg));\n    }\n\n    return sendRequest('create_realm', {arguments: args});\n}\n\nexport function createUser(args) {\n    args = args.map((arg) => serialize(null, arg));\n    const result = sendRequest('create_user', {arguments: args});\n    return deserialize(undefined, result);\n}\n\nexport function callMethod(realmId, id, name, args) {\n    if (args) {\n        args = args.map((arg) => serialize(realmId, arg));\n    }\n\n    let result = sendRequest('call_method', {realmId, id, name, arguments: args});\n    return deserialize(realmId, result);\n}\n\nexport function getProperty(realmId, id, name) {\n    let result = sendRequest('get_property', {realmId, id, name});\n    return deserialize(realmId, result);\n}\n\nexport function setProperty(realmId, id, name, value) {\n    value = serialize(realmId, value);\n    sendRequest('set_property', {realmId, id, name, value});\n}\n\nexport function getAllUsers() {\n    let result = sendRequest('get_all_users');\n    return deserialize(undefined, result);\n}\n\nexport function clearTestState() {\n    sendRequest('clear_test_state');\n\n    // Clear all registered callbacks that are specific to this session.\n    registeredCallbacks = registeredCallbacks.filter(cb => Reflect.has(cb, persistentCallback));\n}\n\nfunction registerCallback(callback) {\n    let key = registeredCallbacks.indexOf(callback);\n    return key >= 0 ? key : (registeredCallbacks.push(callback) - 1);\n}\n\nfunction serialize(realmId, value) {\n    if (typeof value == 'undefined') {\n        return {type: objectTypes.UNDEFINED};\n    }\n    if (typeof value == 'function') {\n        return {type: objectTypes.FUNCTION, value: registerCallback(value)};\n    }\n    if (!value || typeof value != 'object') {\n        return {value: value};\n    }\n\n    let id = value[idKey];\n    if (id) {\n        return {id};\n    }\n\n    if (value instanceof Date) {\n        return {type: objectTypes.DATE, value: value.getTime()};\n    }\n\n    if (Array.isArray(value)) {\n        let array = value.map((item) => serialize(realmId, item));\n        return {value: array};\n    }\n\n    if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n        return {type: objectTypes.DATA, value: base64.encode(value)};\n    }\n\n    let keys = Object.keys(value);\n    let values = keys.map((key) => serialize(realmId, value[key]));\n    return {type: objectTypes.DICT, keys, values};\n}\n\nexport function deserialize(realmId, info) {\n    let type = info.type;\n    let handler = type && typeConverters[type];\n    if (handler) {\n        return handler(realmId, info);\n    }\n\n    let value = info.value;\n    if (value && Array.isArray(value)) {\n        return value.map((item) => deserialize(realmId, item));\n    }\n\n    return value;\n}\n\nfunction deserializeDict(realmId, info) {\n    let {keys, values} = info;\n    let object = {};\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n        object[keys[i]] = deserialize(realmId, values[i]);\n    }\n\n    return object;\n}\n\nfunction deserializeFunction(realmId, info) {\n    return registeredCallbacks[info.value];\n}\n\nfunction makeRequest(url, data) {\n    let statusCode;\n    let responseText;\n\n    // The global __debug__ object is provided by Visual Studio Code.\n    if (global.__debug__) {\n        let request = global.__debug__.require('sync-request');\n        let response = request('POST', url, {\n          body: JSON.stringify(data),\n          headers: {\n            \"Content-Type\": \"text/plain;charset=UTF-8\"\n          }\n        });\n\n        statusCode = response.statusCode;\n        responseText = response.body.toString('utf-8');\n    } else {\n        let body = JSON.stringify(data);\n        let request = new XMLHttpRequest();\n\n        request.open('POST', url, false);\n        request.send(body);\n\n        statusCode = request.status;\n        responseText = request.responseText;\n    }\n\n    if (statusCode != 200) {\n        throw new Error(responseText);\n    }\n\n    return JSON.parse(responseText);\n}\n\nfunction sendRequest(command, data, host = sessionHost) {\n    if (!host) {\n        throw new Error('Must first create RPC session with a valid host');\n    }\n\n    data = Object.assign({}, data, sessionId ? {sessionId} : null);\n\n    let url = 'http://' + host + '/' + command;\n    let response = makeRequest(url, data);\n\n    if (!response || response.error) {\n        let error = response && response.error;\n\n        // Remove the type prefix from the error message (e.g. \"Error: \").\n        if (error) {\n            error = error.replace(/^[a-z]+: /i, '');\n        }\n\n        throw new Error(error || `Invalid response for \"${command}\"`);\n    }\n\n    let callback = response.callback;\n    if (callback != null) {\n        let result;\n        let error;\n        try {\n            let realmId = data.realmId;\n            let thisObject = deserialize(realmId, response.this);\n            let args = deserialize(realmId, response.arguments);\n            result = registeredCallbacks[callback].apply(thisObject, args);\n            result = serialize(realmId, result);\n        } catch (e) {\n            error = e.message || ('' + e);\n        }\n        return sendRequest('callback_result', {callback, result, error});\n    }\n\n    return response.result;\n}\n","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/session.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { keys, objectTypes } from './constants';\nimport { getterForProperty, createMethods } from './util';\nimport { deserialize } from './rpc';\n\nexport default class Session { }\n\nObject.defineProperties(Session.prototype, {\n    url: { get: getterForProperty('url') },\n    state: { get: getterForProperty('state') }\n});\n\ncreateMethods(Session.prototype, objectTypes.SESSION, [\n    '_refreshAccessToken',\n    '_simulateError'\n]);\n\nexport function createSession(realmId, info) {\n    let sessionProxy = Object.create(Session.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects \n    // the realm id to be present on any object that is used over rpc\n    sessionProxy[keys.realm] = \"(Session object)\";    \n\n    sessionProxy[keys.id] = info.id;\n    sessionProxy[keys.type] = objectTypes.SESSION;\n    sessionProxy.user = deserialize(realmId, info.data.user);\n    sessionProxy.config = deserialize(realmId, info.data.config)\n\n    return sessionProxy;\n}","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/user.js":"\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { createUser as createUserRPC, getAllUsers as getAllUsersRPC } from './rpc';\nimport { keys, objectTypes } from './constants';\nimport { createMethods } from './util';\n\nexport default class User {\n    static createUser(server, identity, token, isAdmin) {\n       return createUserRPC(Array.from(arguments)); \n    }\n\n    static get all() {\n        return getAllUsersRPC();\n    }\n}\n\ncreateMethods(User.prototype, objectTypes.USER, [\n    'logout',\n    '_sessionForOnDiskPath'\n]);\n\nexport function createUser(realmId, info) {\n    const userProxy = Object.create(User.prototype);\n\n    // FIXME: This is currently necessary because util/createMethod expects \n    // the realm id to be present on any object that is used over rpc\n    userProxy[keys.realm] = \"(User object)\";    \n\n    userProxy[keys.id] = info.id;\n    userProxy[keys.type] = objectTypes.USER;\n    Object.assign(userProxy, info.data);\n\n    return userProxy;\n}","/home/travis/build/npmtest/node-npmtest-realm/node_modules/realm/lib/browser/util.js":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2016 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n'use strict';\n\nimport { fireMutationListeners } from './collections';\nimport { keys } from './constants';\nimport * as rpc from './rpc';\n\nexport function createMethods(prototype, type, methodNames, mutates) {\n    let props = {};\n\n    methodNames.forEach((name) => {\n        props[name] = {\n            value: createMethod(type, name, mutates),\n        };\n    });\n\n    Object.defineProperties(prototype, props);\n}\n\nexport function createMethod(type, name, mutates) {\n    return function() {\n        let realmId = this[keys.realm];\n        let id = this[keys.id];\n\n        if (!realmId || !id) {\n            throw new TypeError(name + ' method was not called a Realm object!');\n        }\n        if (this[keys.type] !== type) {\n            throw new TypeError(name + ' method was called on an object of the wrong type!');\n        }\n\n        try {\n            return rpc.callMethod(realmId, id, name, Array.from(arguments));\n        } finally {\n            if (mutates) {\n                fireMutationListeners(realmId);\n            }\n        }\n    };\n}\n\nexport function getterForProperty(name) {\n    return function() {\n        return rpc.getProperty(this[keys.realm], this[keys.id], name);\n    };\n}\n\nexport function setterForProperty(name) {\n    return function(value) {\n        let realmId = this[keys.realm];\n\n        rpc.setProperty(realmId, this[keys.id], name, value);\n\n        // If this isn't a primitive value, then it might create a new object in the Realm.\n        if (value && typeof value == 'object') {\n            fireMutationListeners(realmId);\n        }\n    };\n}\n"}